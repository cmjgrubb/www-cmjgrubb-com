{
    "articleTitle":"The Quick and Dirty on Git and GitHub",
    "articleContent":"<h2 class=\"post\">The Quick and Dirty on Git and GitHub</h2><p class=\"post\">I should start this post off by saying that I am no GitHub wizard. I use GitHub to track changes for my own projects. I'm not worried about branching, cloning, or merging. This is really intended for beginners or as a quick reference for one-person projects.</p><h3 class=\"post\">The GitHub Part</h3><p class=\"post\">Setting up a GitHub account is pretty easy and straightforward, and it doesn't bear me getting into other than to say that the free tier will work for most people. Once you've created your project, you'll want to create a repository. Generally speaking, each repository will correlate with a project.</p><p class=\"post\">To create a new repository, click the plus sign in the top right corner of the page and select \"New repository\" from the dropdown. Name your repository, add a description if you like, select whether you want your repository to be public or private, and check the box next to \"Initialize this repository with a README.\"</p><h3 class=\"post\">Installing Git</h3><p class=\"post\">Installing Git is super easy. In Linux, it's \"sudo apt install git-all\" or \"sudo dnf install git-all,\" depending on your distribution. In MacOS, run \"git --version\" from the terminal, and it will prompt you to install if it isn't already. On Windows, an installer is available at <a href=\"https://git-scm.com/download/win\">https://git-scm.com/download/win</a>.</p><h3 class=\"post\">Setting Up Git</h3><p class=\"post\">There are a couple of quick commands you need to run to configure Git once it's installed:</p><p class=\"console\">git config --global user.name \"<i>username</i>\"</p><p class=\"console\">git config --global user.email \"<i>E-mail address</i>\"</p><h3 class=\"post\">Creating a Local Copy of Your Repository</h3><p class=\"post\">I have a directory in my home folder called \"GitHub\" where I keep a local copy of all my repositories, but you can put this wherever you like. Just note that copying &ndash; or cloning, in Git parlance &ndash; creates its own directory, so you don't need to worry about making a directory for each individual repository. The Git command is:</p><p class=\"console\">git clone https://github.com/<i>username</i>/<i>repository_name</i></p><h3 class=\"post\">Committing Your Changes to GitHub</h3><p class=\"post\">Once you have a local repository and you've created your files within your local repository directory, you need to tell Git that you want these files added to Git's tracking:</p><p class=\"console\">git add file.txt</p><p class=\"post\">You only have to do this once per file. Once you tell Git you want it to keep track of file.txt, it will upload any changes to that file after the next two commands are run. The first of those commands is making the commit. The -m option is the message you'll want to add about what changes you made. Please note that the -m is a required option, and it's hightly recommended you take the time to create a meaningful commit message.</p><p class=\"console\">git commit -m \"Initial commit\"</p><p class=\"post\">Finally, we pull the trigger:</p><p class=\"console\">git push origin master</p><h3 class=\"post\">The Next Time You Use Git</h3><p class=\"post\">Now that everything is set up, using Git in future revolves around using three commands:</p><p class=\"console\">git add newfile.txt</p><p class=\"console\">git commit -m \"Added newfile.txt\"</p><p class=\"console\">git push origin master</p><p class=\"post\">Finally, there's a cool command to give you some insight into what is going on with Git:</p><p class=\"console\">git status</p><p class=\"post\">The git status command doesn't change anything, so run it anytime you like. In fact, I recommend executing it occassionally just to keep up with what's going on. You may realize that a critical file isn't being tracked in GitHub just by taking the time to check.</p>"
}