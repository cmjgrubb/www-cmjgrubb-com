{
  "blogs": [
    {
      "articleTitle": "Getting Started",
      "shortTitle": "getting_started",
      "articleContent": "<p class=\"post\">I've been in information technologies for eight years now. I love it! It has given me a lot of opportunties, and I've had the pleasure of working with some amazing people along the way. Great people have given me cool opportunties.</p><p class=\"post\">While I appreciate all the opportunties I've had, my career has happened without much direction on my part. That's really due to not knowing what I wanted to do in IT.</p><p class=\"post\">I have finally figured it out, though. I want to be a developer. To become a developer, though, I need projects. So I figured I'd start a blog about my journey from operations to development.</p><p class=\"post\">This website is my learning platform, and I look forward to sharing my journey with you. I'll share my thoughts, struggles, and dreams, and maybe we'll find some things we have in common. I hope you enjoy.</p><p class=\"post\">Keep coding and God bless!</p>"
    },
    {
      "articleTitle": "Hosting a Static HTTPS Website on AWS",
      "shortTitle": "hosting_a_static_https_website_on_aws",
      "articleContent": "<p class=\"post\">This site is intended as a project for me to learn front-end development, and I wanted to host it on Amazon Web Services. I ran into a few snags getting this up and running, and I never found a complete tutorial on how to do this. I'm hoping this post fills a gap.</p><p class=\"post\">So why AWS? Well, AWS is the current industry standard cloud offering, and many of the services are budget friendly. Additionally, for me, personally, the organization I work for is looking to move the bulk of its workload to AWS, and I'm anxious to learn as much as I can about the platform. AWS has some cool SaaS offerings, such as Relational Database Service and Directory Service, so I did a DuckDuckGo search on AWS webhosting and discovered I could do it through S3.</p><h3 class=\"post\">Setting Up Your S3 Buckets</h3><p class=\"post\">For those who don't know, S3 is Amazon's storage service. Setting this up was pretty simple. First, you need to register your domain. I use Namecheap, but you can use Amazon Route 53 or your domain registrar of choice. Next, log into the S3 console at <a href=\"https://console.aws.amazon.com/s3/\">https://console.aws.amazon.com/s3/</a> (I won't go into creating an AWS account, but it's pretty straightforward). If you want to redirect from one domain to another &ndash; I have a rederict for my website from cmjgrubb.com to www.cmjgrubb.com &ndash; you'll need to create two buckets, one for the page itself and the other for the redirect. We'll cover the redirect bucket first. Hit the \"Create Bucket\" button. The name of the bucket is going to be your fully-qualified domain name you're redirecting from, e.g. mine is cmjgrubb.com. Click next. I'll leave you to decide your settings on that next page, but take some time to explore your options. For now, just choose the defaults on the permissions page and press on. When you're satisfied, click \"Create bucket.\"</p><p class=\"post\">In the main S3 console, click on the name of the bucket you want to redirect from. Hit the \"Properties\" tab at the top. From there, click on \"Static website hosting.\" Click the \"Redirect requests\" radio button and enter the FQDN (e.g. www.cmjgrubb.com) in the \"Target bucket or domain\" text field. That's it for the redirect! Now let's look at creating the bucket you'll host from.</p><p class=\"post\">Head back to the S3 console, and hit that \"Create bucket\" button again. The name of this bucket is the FQDN of your site. Again, explore your options on the next page and select what works for you. Back on the main S3 console, you click on your new bucket. Click the properties tab. Click \"Static website hosting.\" Click \"Use this bucket to host a website.\" I just used the standard index.html for my index document. You can upload your index document and any other files you'd like in the overview tab.</p><h3 class=\"post\">Configuring CloudFront for HTTPS</h3><p class=\"post\">The S3 part was pretty straightforward. It was setting up CloudFront that gave me issues. To be honest, you don't even need CloudFront, but if you want to run your website over HTTPS, you'll need to set it up. For good or bad, the modern web is pushing us in that direction. Who am I to stand in the way of progress?</p><p class=\"post\">The first step is to get yourself a certificate. That's outside the scope of this article, but it is important that the certificate doesn't use higher than 2048-bit encryption. That's the highest CloudFront supports.</p><p class=\"post\">The console for CloudFront is at <a href=\"https://console.aws.amazon.com/cloudfront/\">https://console.aws.amazon.com/cloudfront/</a>. Start there and click the \"Create Distribution\" button at the top. On the next page, you want to select a Web CloudFront. The origin is going to be the FQDN of your S3 bucket, which you can find under Properties > Static website hosting on your S3 console. For viewer Protocol Policy, you want to redirect HTTP to HTTPS. The Alternate Domain Names (CNAMEs) is the FQDN of your website. You are going to want to use the custom SSL option.</p><p class=\"post\">A side quest! Now, we have to jump over to AWS Certificate Manager at <a href=\"https://console.aws.amazon.com/acm/home?region=us-east-1#/\">https://console.aws.amazon.com/acm/home?region=us-east-1#/</a>. Make sure that you have the little \"N. Virginia\" in the top right. For some reason unbeknownst to me, this is important. Beknownst to me is the fact that this will not work in another region. Click the \"Import certificate\" button at the top. You'll just copy and paste your certificate and key into their respective text boxes. The rest is pretty straightforward.</p><p class=\"post\">Back to the main storyline, you should now see your certificate in the dropdown. I think you can select the defaults on everything else and click the \"Create Distribution\" button in the bottom right. The last piece of the puzzle is to create a CNAME record with your domain registrar from the hostname you want to use pointing to the domain name in CloudFront, which can be found in the main console for your distribution.</p><p class=\"post\">That should be it! Unfortunately, I wrote this tutorial after having done this. I hope I didn't miss anything, but if you have any questions, comments, or suggestions, hit me up on Twitter at <a href=\"https://twitter.com/cmjgrubb\">@CmjGrubb</a>. I hope this was useful for you!</p><h3 class=\"post\">Postscript &ndash; Making Changes to Your Website</h3><p class=\"post\">I just ran across this last night. I uploaded some changes to my S3 bucket, but my changes weren't reflected. It makes sense, though; CloudFront is a caching service meant to speed up your webpage first and foremost. We just need to clear the cache, right? Unlike many things in technology, it really is that easy. Go back to your CloudFront console and click on your distribution. Click on the \"Invalidations\" tab. Sounds pretty dramatic, right? Click the \"Create Invalidation\" button. Type the path of the filename(s) you want to refresh. If you want to refresh everything, you can just enter an asterisk for a wildcard. Finally, don't forget to clear the cache on your browser.</p><p class=\"post\">God bless!</p>"
    },
    {
      "articleTitle": "Pep Talk",
      "shortTitle": "pep_talk",
      "articleContent": "<p class=\"post\">This stuff is hard. Don't get discouraged because you don't get it right away.</p><p class=\"post\">Back when the world was young, I had thought about being a computer science major in college. I took an intro CS class that taught Fortran, and decided that I didn't have the knack, eventually becoming an English literature major.</p><p class=\"post\">Fast forward five years, and I'm looking for a career change. (Surprise! Surprise!) My dad turns me onto networking. As I'm forging my career in IT, I think of programmers as <i>real IT that I'm not smart enough for.</i> After looking around a little, though, I begin to think that maybe I can do it, and furthermore, I think it might be what I really want to do.</p><p class=\"post\">I return to the community college where I orchestrated my career change into networking, and I get a software developer certificate. Pardon the meander, but here's my point: I still struggled with programming. I have yet to have that magic aha moment where I, all of a sudden, start \"thinking like a programmer,\" despite getting straight A's and being the model student. Most of my classmates struggled more than I did, and I still don't get it.</p><p class=\"post\">I will, though, and you will, too. Stick with it. Don't overanalyze it. Just shut up and code.</p>"
    },
    {
      "articleTitle": "Small Potatoes",
      "shortTitle": "small_potatoes",
      "articleContent": "<p class=\"post\">I know this website isn't much. I know the design leaves a lot to be desired. I know the colors I've chosen are a little off.</p><p class=\"post\">But you know what? That's alright.</p><p class=\"post\">I'm still learning, and building this website is meant to help me learn. I want to put together the best website I can, but that doesn't mean I'm going to build the greatest site the world has ever seen overnight.</p><p class=\"post\">Don't be afraid to put yourself out there if it helps you grow. Don't be untrue to yourself. Don't put yourself out there as the grand master of coding because you know how to write links in HTML. There's no shame in learning. There's no shame in being earlier in the path than someone else.</p>"
    },
    {
      "articleTitle": "The Quick and Dirty on Git and GitHub",
      "shortTitle": "the_quick_and_dirty_on_git_and_github",
      "articleContent": "<p class=\"post\">I should start this post off by saying that I am no GitHub wizard. I use GitHub to track changes for my own projects. I'm not worried about branching, cloning, or merging. This is really intended for beginners or as a quick reference for one-person projects.</p><h3 class=\"post\">The GitHub Part</h3><p class=\"post\">Setting up a GitHub account is pretty easy and straightforward, and it doesn't bear me getting into other than to say that the free tier will work for most people. Once you've created your project, you'll want to create a repository. Generally speaking, each repository will correlate with a project.</p><p class=\"post\">To create a new repository, click the plus sign in the top right corner of the page and select \"New repository\" from the dropdown. Name your repository, add a description if you like, select whether you want your repository to be public or private, and check the box next to \"Initialize this repository with a README.\"</p><h3 class=\"post\">Installing Git</h3><p class=\"post\">Installing Git is super easy. In Linux, it's \"sudo apt install git-all\" or \"sudo dnf install git-all,\" depending on your distribution. In MacOS, run \"git --version\" from the terminal, and it will prompt you to install if it isn't already. On Windows, an installer is available at <a href=\"https://git-scm.com/download/win\">https://git-scm.com/download/win</a>.</p><h3 class=\"post\">Setting Up Git</h3><p class=\"post\">There are a couple of quick commands you need to run to configure Git once it's installed:</p><p class=\"console\">git config --global user.name \"<i>username</i>\"</p><p class=\"console\">git config --global user.email \"<i>E-mail address</i>\"</p><h3 class=\"post\">Creating a Local Copy of Your Repository</h3><p class=\"post\">I have a directory in my home folder called \"GitHub\" where I keep a local copy of all my repositories, but you can put this wherever you like. Just note that copying &ndash; or cloning, in Git parlance &ndash; creates its own directory, so you don't need to worry about making a directory for each individual repository. The Git command is:</p><p class=\"console\">git clone https://github.com/<i>username</i>/<i>repository_name</i></p><h3 class=\"post\">Committing Your Changes to GitHub</h3><p class=\"post\">Once you have a local repository and you've created your files within your local repository directory, you need to tell Git that you want these files added to Git's tracking:</p><p class=\"console\">git add file.txt</p><p class=\"post\">You only have to do this once per file. Once you tell Git you want it to keep track of file.txt, it will upload any changes to that file after the next two commands are run. The first of those commands is making the commit. The -m option is the message you'll want to add about what changes you made. Please note that the -m is a required option, and it's hightly recommended you take the time to create a meaningful commit message.</p><p class=\"console\">git commit -m \"Initial commit\"</p><p class=\"post\">Finally, we pull the trigger:</p><p class=\"console\">git push origin master</p><h3 class=\"post\">The Next Time You Use Git</h3><p class=\"post\">Now that everything is set up, using Git in future revolves around using three commands:</p><p class=\"console\">git add newfile.txt</p><p class=\"console\">git commit -m \"Added newfile.txt\"</p><p class=\"console\">git push origin master</p><p class=\"post\">Finally, there's a cool command to give you some insight into what is going on with Git:</p><p class=\"console\">git status</p><p class=\"post\">The git status command doesn't change anything, so run it anytime you like. In fact, I recommend executing it occassionally just to keep up with what's going on. You may realize that a critical file isn't being tracked in GitHub just by taking the time to check.</p>"
    }
  ]
}
